package test;

public class Demo {

    public Demo() {
        System.out.println("Hi!");
    }

    public static void main(String[] args) throws Exception {
        Class clazz = Class.forName("test.Demo");
        Demo demo = (Demo) clazz.newInstance();
    }
}
--------------------------------------------------------------------------------

As explained in its javadoc, calling Class.forName(String) returns the Class object 
associated with the class or interface with the given string name i.e. it returns 
test.Demo.class which is affected to the clazz variable of type Class.

Then, calling clazz.newInstance() creates a new instance of the class represented 
by this Class object. The class is instantiated as if by a new expression with an 
empty argument list. In other words, this is here actually equivalent to a new Demo() 
and returns a new instance of Demo.

And running this Demo class thus prints the following output:
Hi!

The big difference with the traditional new is that newInstance allows to 
instantiate a class that you don't know until runtime, making your code more dynamic.

A typical example is the JDBC API which loads, at runtime, the exact driver required
to perform the work. EJBs containers, Servlet containers are other good examples: 
they use dynamic runtime loading to load and create components they don't know 
anything before the runtime.